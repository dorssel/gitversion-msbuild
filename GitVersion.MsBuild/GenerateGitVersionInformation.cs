// SPDX-FileCopyrightText: 2021 NServiceBus Ltd, GitTools and contributors.
// SPDX-FileCopyrightText: 2024 Frans van Dorsselaer
//
// SPDX-License-Identifier: MIT

using System.Text;
using Microsoft.Build.Framework;

namespace Dorssel.GitVersion.MsBuild;

public class GenerateGitVersionInformation
    : GitVersionTaskBase
{
    [Required]
    public string ProjectFile { get; set; } = string.Empty;

    [Required]
    public string IntermediateOutputPath { get; set; } = string.Empty;

    [Required]
    public string Language { get; set; } = "C#";

    public string? UseProjectNamespaceForGitVersionInformation { get; set; }

    public string RootNamespace { get; set; } = string.Empty;

    [Output]
    public string GitVersionInformationFilePath { get; set; } = string.Empty;

    public override bool Execute()
    {
        if (!string.IsNullOrEmpty(IntermediateOutputPath))
        {
            // Ensure provided output path exists first. Fixes issue #2815.
            _ = Directory.CreateDirectory(IntermediateOutputPath);
        }

        if (Language != "C#")
        {
            Log.LogError($"Currently, only C# is supported. Please report an issue for {Language} support.");
            return false;
        }

        GitVersionInformationFilePath = Path.Combine(IntermediateOutputPath, "GitVersionInformation.g.cs");

        var builder = new StringBuilder();
        _ = builder.Append($$"""
            [global::System.Runtime.CompilerServices.CompilerGenerated]
            [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
            static class GitVersionInformation
            {

            """);
        foreach (var keyValue in GitVersionVariables.FromFile(VersionFile!))
        {
            _ = builder.AppendLine($"    public const string {keyValue.Key} = \"{keyValue.Value}\";");
        }
        _ = builder.Append($$"""
            }

            """);
        var namespaceContent = builder.ToString();

        builder = new StringBuilder();
        _ = builder.Append($$"""
            //------------------------------------------------------------------------------
            // <auto-generated>
            //     This code was generated by a tool.
            //     GitVersion
            //
            //     Changes to this file may cause incorrect behavior and will be lost if
            //     the code is regenerated.
            // </auto-generated>
            //------------------------------------------------------------------------------

            #if NET20 || NET35 || NETCOREAPP1_0 || NETCOREAPP1_1 || NETSTANDARD1_0 || NETSTANDARD1_1 || NETSTANDARD1_2 || NETSTANDARD1_3 || NETSTANDARD1_4 || NETSTANDARD1_5 || NETSTANDARD1_6
            namespace System.Diagnostics.CodeAnalysis
            {
                [global::System.AttributeUsage(
                    global::System.AttributeTargets.Assembly |
                    global::System.AttributeTargets.Class |
                    global::System.AttributeTargets.Struct |
                    global::System.AttributeTargets.Constructor |
                    global::System.AttributeTargets.Method |
                    global::System.AttributeTargets.Property |
                    global::System.AttributeTargets.Event,
                    Inherited = false, AllowMultiple = false)]
                internal sealed class ExcludeFromCodeCoverageAttribute : global::System.Attribute { }
            }
            #endif


            """);

        if (UseProjectNamespaceForGitVersionInformation is not null
            && bool.TryParse(UseProjectNamespaceForGitVersionInformation, out var useTargetPathAsRootNamespace)
            && useTargetPathAsRootNamespace)
        {
            var targetNamespace = RootNamespace;
            if (string.IsNullOrWhiteSpace(targetNamespace))
            {
                targetNamespace = Path.GetFileNameWithoutExtension(ProjectFile);
            }
            // indent each line
            namespaceContent = string.Join("\n", namespaceContent.Split(["\r\n", "\n"], StringSplitOptions.None).Select(line => "    " + line)).TrimEnd();
            _ = builder.Append($$"""
                namespace {{targetNamespace}}
                {
                {{namespaceContent}}
                }

                """);
        }
        else
        {
            _ = builder.Append(namespaceContent);
        }

        // NOTE: Original GitVersion.MsBuild always generates UNIX line endings, even on Windows.
        var newText = builder.ToString().Replace("\r", "");
        var oldText = string.Empty;
        if (File.Exists(GitVersionInformationFilePath))
        {
            oldText = File.ReadAllText(GitVersionInformationFilePath);
        }
        if (newText != oldText)
        {
            File.WriteAllText(GitVersionInformationFilePath, newText);
        }
        return !Log.HasLoggedErrors;
    }
}
